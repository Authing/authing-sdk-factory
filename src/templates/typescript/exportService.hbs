{{>header}}

{{#equals @root.httpClient 'angular'}}
{{#if @root.exportClient}}
import { Injectable } from '@angular/core';
import type { Observable } from 'rxjs';
{{else}}
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import type { Observable } from 'rxjs';
{{/if}}

{{/equals}}
{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from './models/{{{this}}}';
{{/each}}

{{/if}}
{{#notEquals @root.httpClient 'angular'}}
{{/notEquals}}
{{#if @root.exportClient}}
{{#equals @root.httpClient 'angular'}}
import { BaseHttpRequest } from '../core/BaseHttpRequest';
{{else}}
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
{{/equals}}
{{else}}
import { DEFAULT_OPTIONS, ManagementClientOptions } from './ManagementClientOptions';
import { ManagementHttpClient } from './ManagementHttpClient';
import { domainC14n } from './utils';
import Axios, { AxiosRequestConfig } from "axios";

{{/if}}

{{#equals @root.httpClient 'angular'}}
@Injectable()
{{/equals}}
export class ManagementClient {
    private httpClient: ManagementHttpClient;
    private options: ManagementClientOptions;
    constructor(options: ManagementClientOptions) {
        // @ts-ignore
        Object.keys(options).forEach((i: any) => !options[i] && delete options[i]);
        this.options = Object.assign({}, DEFAULT_OPTIONS, options);
      	Axios.defaults.baseURL = domainC14n(String(this.options.host));
        this.httpClient = new ManagementHttpClient(this.options);

        if (!this.options.accessKeyId) {
            throw new Error('accessKeyId is required');
        }

        if (!this.options.accessKeySecret) {
            throw new Error(
                'accessKeySecret is required'
            );
        }
    }

	public async makeRequest(params: AxiosRequestConfig) {
      return await this.httpClient.request(params);
  	}


	{{#each operations}}
	/**
	{{#if deprecated}}
	 * @deprecated
	{{/if}}
	{{#if summary}}
	 * @summary {{{escapeComment summary}}}
	{{/if}}
	{{#if description}}
	 * @description {{{escapeComment description}}}
	{{/if}}
	{{#unless @root.useOptions}}
	{{#if parameters}}
	{{#each parameters}}
	 * @param {{{name}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	{{/if}}
	{{/unless}}
	{{#each results}}
	 * @returns {{{type}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	 */
	public async {{{name}}}({{#equals method 'GET'}}{{>parametersGet}}{{else}}{{>parametersPost}}{{/equals}}): Promise<{{>result}}> {
		return await this.httpClient.request({
			method: '{{{method}}}',
			url: '{{{path}}}',
			{{#if parametersQuery}}
			params: {
				{{#each parametersQuery}}
				{{{prop}}}: {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersBody}}
			{{#equals parametersBody.in 'body'}}
			data: {{{parametersBody.name}}},
			{{/equals}}
			{{/if}}
		});
	}

	{{/each}}
}
