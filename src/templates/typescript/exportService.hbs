{{>header}}

{{#equals @root.httpClient 'angular'}}
{{#if @root.exportClient}}
import { Injectable } from '@angular/core';
import type { Observable } from 'rxjs';
{{else}}
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import type { Observable } from 'rxjs';
{{/if}}

{{/equals}}
{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from './models/{{{this}}}';
{{/each}}

{{/if}}
{{#notEquals @root.httpClient 'angular'}}
{{/notEquals}}
{{#if @root.exportClient}}
{{#equals @root.httpClient 'angular'}}
import { BaseHttpRequest } from '../core/BaseHttpRequest';
{{else}}
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
{{/equals}}
{{else}}
import { DEFAULT_OPTIONS, ManagementClientOptions } from './ManagementClientOptions';
import { ManagementHttpClient } from './ManagementHttpClient';
import { domainC14n } from './utils';
import Axios, { AxiosRequestConfig } from "axios";
import WebSocket from 'ws';
import { buildAuthorization, buildStringToSign } from "./utils/buildSignature";
const pkg = require("../package.json")

{{/if}}

{{#equals @root.httpClient 'angular'}}
@Injectable()
{{/equals}}
export class ManagementClient {
    private httpClient: ManagementHttpClient;
    private options: ManagementClientOptions;
	private wsMap: {[propName: string]: {
		socket: WebSocket,
		lockConnect: boolean,
		timeConnect: number
  	}};
	private eventBus: {[propName: string]: [Function, Function][]};
	constructor(options: ManagementClientOptions) {
		Object.keys(options).forEach(
      	(i: any) =>
        	typeof (options as any)[i] !== "number" && !(options as any)[i] && delete (options as any)[i]
    	);
		this.options = Object.assign({}, DEFAULT_OPTIONS, options);
		Axios.defaults.baseURL = domainC14n(String(this.options.host));
		this.httpClient = new ManagementHttpClient(this.options);
		this.wsMap = {};
		this.eventBus = {}


		if (!this.options.accessKeyId) {
		throw new Error("accessKeyId is required");
		}

		if (!this.options.accessKeySecret) {
		throw new Error("accessKeySecret is required");
		}
	}

	public async makeRequest(params: AxiosRequestConfig) {
      return await this.httpClient.request(params);
  	}


	{{#each operations}}
	/**
	{{#if deprecated}}
	 * @deprecated
	{{/if}}
	{{#if summary}}
	 * @summary {{{escapeComment summary}}}
	{{/if}}
	{{#if description}}
	 * @description {{{escapeComment description}}}
	{{/if}}
	{{#unless @root.useOptions}}
	{{#if parameters}}
	{{#each parameters}}
	 * @param {{{name}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	{{/if}}
	{{/unless}}
	{{#each results}}
	 * @returns {{{type}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	 */
	public async {{{name}}}({{#equals method 'GET'}}{{>parametersGet}}{{else}}{{>parametersPost}}{{/equals}}): Promise<{{>result}}> {
		return await this.httpClient.request({
			method: '{{{method}}}',
			url: '{{{path}}}',
			{{#if parametersQuery}}
			params: {
				{{#each parametersQuery}}
				{{{prop}}}: {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersBody}}
			{{#equals parametersBody.in 'body'}}
			data: {{{parametersBody.name}}},
			{{/equals}}
			{{/if}}
		});
	}

	{{/each}}

	/**
   * @summary socket 重连
   * @returns
   */
  private reconnect(eventName: string) {
    return new Promise((resolve, reject) => {
      if (this.options.retryTimes && this.wsMap[eventName].timeConnect < this.options.retryTimes) {
        if (!this.wsMap[eventName].lockConnect) {
          this.wsMap[eventName].lockConnect = true
          this.wsMap[eventName].timeConnect ++
          setTimeout(() => {
            this.wsMap[eventName].lockConnect = false
            this.initWebSocket(eventName, true).then(res => {
              resolve(true)
            }).catch(e => {
              reject(e)
            })
          }, 2000);
        }
      } else {
        reject(`socket 服务连接超时`);
      }
    })
  }

  /**
   * @summary 建立 socket 连接，监听 message 回调事件队列
   * @returns
   */
  private initWebSocket(eventName: string, retry?: boolean) {
    return new Promise((resolve, reject) => {
      if (!this.wsMap[eventName] || retry) {

        this.wsMap[eventName] = {
          socket: new WebSocket(`${this.options.socketUri}/events/v1/management/sub?code=${eventName}`, {
            headers: {
              // 构建 token
              authorization: buildAuthorization(
                this.options.accessKeyId,
                this.options.accessKeySecret,
                buildStringToSign("websocket", '', {}, {})
              )
            }
          }),
          timeConnect: retry ? this.wsMap[eventName].timeConnect : 0,
          lockConnect: false
        }

        this.wsMap[eventName].socket.on('open', () => {
          resolve(true)
        })

        this.wsMap[eventName].socket.on('message', (data: Buffer) => {
          try {
            if (this.eventBus[eventName]) {
              this.eventBus[eventName].forEach(callback => {
                callback[0](data.toString("utf8"))
              })
            } else {
              // 未订阅事件
              console.warn("未订阅的事件：", eventName);
            }
          } catch (error) {
            return reject(`数据格式化错误，检查传输数据格式！！！ ${error}`);
          }
        })

        this.wsMap[eventName].socket.on('error', async(e) => {
          try {
            await this.reconnect(eventName)
            resolve(true)
          } catch (error) {
            return reject(`socket 连接异常：${e}`)
          }
        })

        this.wsMap[eventName].socket.on('close', async() => {
          try {
            await this.reconnect(eventName)
            resolve(true)
          } catch (error) {
            return reject(`socket 连接关闭`)
          }
        })
      } else {
        resolve(true)
      }
    })
  }

  /**
   * @summary 事件订阅
   * @description 订阅后通过建立 socket 连接接收服务端消息回调
   * @returns
   */
  public sub(eventName: string, callback: Function, errCallback: Function) {
    /**
     * 1. 判断是否连接 socket
     * 2. 获取 socket 实例
     * 3. 订阅
     */
    if (typeof eventName !== 'string') {
      throw new Error("订阅事件名称为 string 类型！！！")
    }

    if (typeof callback !== 'function') {
      throw new Error("订阅事件回调函数需要为 function 类型！！！");
    }

    if (!this.options.socketUri) {
      throw new Error("订阅事件需要添加 socketUri 连接地址！！！")
    }

    this.initWebSocket(eventName).catch(e => {
      this.eventBus[eventName].forEach((item) => {
        item[1]?.(e)
      })
    })

    if (this.eventBus[eventName]) {
      this.eventBus[eventName].push([callback, errCallback])
    } else {
      this.eventBus[eventName] = [[callback, errCallback]]
    }
  }

  /**
   * @summary 事件发布
   * @description 客户调用发布事件到事件中心
   * @returns
   */
  public async pub(eventName: string, data: string) {
    if (typeof eventName !== 'string') {
      throw new Error("事件名称为 string 类型！！！")
    }

    if (typeof data !== 'string') {
      throw new Error("发布数据为 string 类型！！！")
    }

    return await this.httpClient.request({
      method: "POST",
      url: "/api/v3/pub-event",
      data: {
        eventType: eventName,
        source: `${pkg.name}: ${pkg.version}`,
        eventData: data
      },
    });
  }

}
