# coding: utf-8
import json

from .http.ManagementHttpClient import ManagementHttpClient
from .utils.signatureComposer import getAuthorization
from .utils.wss import handleMessage

class ManagementClient(object):
    """Authing Management Client"""

    def __init__(
        self,
        access_key_id,
        access_key_secret,
        host=None,
        timeout=10.0,
        lang=None,
        use_unverified_ssl=False,
		websocket_host = None,
        websocket_endpoint = None
    ):
        self.access_key_id = access_key_id
        self.access_key_secret = access_key_secret
        self.host = host or "https://api.authing.cn"
        self.timeout = timeout
        self.lang = lang
        self.use_unverified_ssl = use_unverified_ssl
		self.websocket_host = websocket_host or "wss://events.authing.cn"
        self.websocket_endpoint = websocket_endpoint or "/events/v1/management/sub"
        self.http_client = ManagementHttpClient(
            host=self.host,
            lang=self.lang,
            use_unverified_ssl=self.use_unverified_ssl,
            access_key_id=self.access_key_id,
            access_key_secret=self.access_key_secret,
        )

	{{#each operations}}
	{{console this}}
	def {{{name}}}(self, {{#equals method 'POST' }}{{>parametersPost}}{{else}}{{>parametersGet}}{{/equals}}):
		"""{{{summary}}}

		{{{description}}}

		Attributes:
		{{#equals method 'POST' }}
		{{#each parametersRaw.python}}
			{{name_underscore}} ({{type_python}}): {{description}}
		{{/each}}
		{{else}}
		{{#each parameters}}
			{{prop}} ({{type_python}}): {{description}}
		{{/each}}
		{{/equals}}
		"""
		return self.http_client.request(
			method='{{{method}}}',
			url='{{{path}}}',
			{{#if parametersQuery}}
			params={
				{{#each parametersQuery}}
				'{{{prop}}}': {{{prop_underscore}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersBody}}
			{{#equals parametersBody.in 'body'}}
			json={
				{{#each parametersRaw.python}}
				'{{{name}}}': {{{name_underscore}}},
				{{/each}}
			},
			{{/equals}}
			{{/if}}
		)

	{{/each}}


    def sub_event(self,event_code,callback):
        """订阅事件

        订阅 authing 公共事件或自定义事件

        Attributes:
            eventCode (str): 事件编码
            callback (callable): 回调函数
        """
        assert event_code,"eventCode 不能为空"
        assert callable(callback),"callback 必须为可执行函数"
        authorization = getAuthorization(self.access_key_id,self.access_key_secret)
        # print("authorization:"+authorization)
        eventUri = self.websocket_host + self.websocket_endpoint + "?code="+ event_code
        # print("eventUri:"+eventUri)
        handleMessage(eventUri,callback,authorization)

    def put_event(self,event_code,data):
        """发布自定义事件

        发布事件

        Attributes:
            event_code (str): 事件编码
            data (json): 事件体
        """
        return self.http_client.request(
            method="POST",
            url="/api/v3/pub-event",
            json={
                "eventType": event_code,
                "eventData": json.dumps(data)
            },
        )

