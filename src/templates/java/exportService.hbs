package cn.authing.sdk.java.client;

{{#if imports}}
import cn.authing.sdk.java.dto.*;

{{/if}}
import java.util.HashMap;
import java.util.Collections;
import java.util.Map;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;

import cn.authing.sdk.java.model.Receiver;
import cn.hutool.core.lang.Assert;
import cn.authing.sdk.java.model.AuthingRequestConfig;
import cn.authing.sdk.java.model.ManagementClientOptions;
import cn.hutool.core.util.StrUtil;


public class ManagementClient extends BaseClient {

    public ManagementClient(ManagementClientOptions options) {
        super(options);
        // 必要参数校验
        if (StrUtil.isBlank(options.getAccessKeyId())) {
            throw new IllegalArgumentException("accessKeyId is required");
        }
        if (StrUtil.isBlank(options.getAccessKeySecret())) {
            throw new IllegalArgumentException("accessKeySecret is required");
        }
    }

	public Object makeRequest(MakeRequestReqDto reqDto) {
        AuthingRequestConfig config = new AuthingRequestConfig();
        config.setUrl(reqDto.getUrl());
        config.setBody(reqDto.getData());
        config.setMethod(reqDto.getMethod());
        String response = request(config);
        return deserialize(response, Object.class);
    }

	{{#each operations}}
	/**
	{{#if deprecated}}
	 * @deprecated
	{{/if}}
	{{#if summary}}
	 * @summary {{{escapeComment summary}}}
	{{/if}}
	{{#if description}}
	 * @description {{{escapeComment description}}}
	{{/if}}
	**/
    {{#equals method "POST"}}
	public {{>result}} {{{name}}}({{#if parametersBody}}{{parametersBody.type}} reqDto{{/if}}) {
		AuthingRequestConfig config = new AuthingRequestConfig();
        config.setUrl("{{{path}}}");
		{{#if parametersBody}}config.setBody(reqDto);{{/if}}
        config.setMethod("{{method}}");
        String response = request(config);
        return deserialize(response, {{>result}}.class);
	}
    {{/equals}}
    {{#equals method "GET"}}
	public {{>result}} {{{name}}}({{#if parametersDto}}{{parametersDto}} reqDto{{/if}}) {
        AuthingRequestConfig config = new AuthingRequestConfig();
        config.setUrl("{{path}}");
        {{#if parametersDto}}
        config.setBody(reqDto);
        {{else}}
        config.setBody(new Object());
        {{/if}}
        config.setMethod("{{method}}");
        String response = request(config);
        return deserialize(response, {{>result}}.class);
	}
    {{/equals}}
	{{/each}}

        @Override
    public void subEvent(String eventCode, Receiver receiver) {
        if (StrUtil.isBlank(eventCode)) {
            throw new IllegalArgumentException("eventCode is required");
        }
        if (receiver == null) {
            throw new IllegalArgumentException("receiver is required");
        }
        ManagementClientOptions options = (ManagementClientOptions) this.options;
        String eventUri = options.getWebsocketHost()+options.getWebsocketEndpoint()+"?code="+eventCode;
        URI wssUri = null;
        try {
            wssUri = new URI(eventUri);
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
        // System.out.println("eventUri:"+eventUri);
        SignatureComposer signatureComposer = new SignatureComposer();
        HashMap<String,String> query = new HashMap<String, String>();
        String signa = signatureComposer.composeStringToSign("websocket","",query,query);
        // String signa = signatureComposer.composeStringToSign("websocket",eventUri,query,query); // server 端验证不用传 uri
        // System.out.println("signa:"+signa);
        String authorization = signatureComposer.getAuthorization(options.getAccessKeyId(),options.getAccessKeySecret(),signa);
        // System.out.println(authorization);
        HashMap<String,String> headers = new HashMap();
        headers.put("Authorization",authorization);
        AuthingWebsocketClient client = new AuthingWebsocketClient(wssUri,headers,receiver);
        client.connect();
    }

    public CostGetAllRightItemRespDto pubtEvent(String eventCode,Object data){
        Assert.notNull(eventCode);
        Assert.notNull(data);
        AuthingRequestConfig config = new AuthingRequestConfig();
        config.setUrl("/api/v3/pub-event");
        config.setBody(new EventDto(eventCode,data));
        config.setMethod("POST");
        String response = request(config);
        return deserialize(response, CostGetAllRightItemRespDto.class);
    }
}
