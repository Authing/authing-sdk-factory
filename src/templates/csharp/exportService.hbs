using Authing.CSharp.SDK.Extensions;
using Authing.CSharp.SDK.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Authing.CSharp.SDK.Services
{
	 public class ManagementClient : BaseManagementService
    {
	    /// <summary>
		/// 初始化管理服务
		/// </summary>
		/// <param name="accessKeyId ">用户池 ID</param>
		/// <param name="accessKeySecret ">用户池密钥</param>
		public ManagementClient(ManagementClientOptions options) : base(options)
		{
		}

		{{#each operations}}
		{{#if summary}}
		///<summary>
		/// {{{escapeCsharpComment summary}}}
		///</summary>
		{{/if}}
		{{#if parameters}}
		{{#each parameters}}
		/// <param name="{{#equals name 'namespace'}}nameSpace{{else}}{{{name}}}{{/equals}}">{{#if description}}{{{escapeCsharpComment description}}}{{/if}}</param>
		{{/each}}
		{{/if}}
		{{#each results}}
		///<returns>{{{type}}}</returns>
		{{/each}}
		{{#equals method "POST"}}
		public async Task<{{>result}}> {{convertFirstCharToUpperCase name}}({{>parametersPost}})
		{
			string httpResponse=await Request("{{{method}}}", "{{{path}}}",requestBody).ConfigureAwait(false);

			{{>result}} result=m_JsonService.DeserializeObject<{{>result}}>(httpResponse);
			return result;
		}
		{{/equals}}
		{{#equals method "GET"}}
		public async Task<{{>result}}> {{convertFirstCharToUpperCase name}}({{#if parametersDto}}{{parametersDto}} reqDto{{/if}})
		{
			{{#if parametersDto}}
			string httpResponse=await Request("{{{method}}}", "{{{path}}}",reqDto).ConfigureAwait(false);
			{{else}}
			string httpResponse=await Request("{{{method}}}", "{{{path}}}").ConfigureAwait(false);
			{{/if}}

			{{>result}} result=m_JsonService.DeserializeObject<{{>result}}>(httpResponse);
			return result;

		}
		{{/equals}}
		{{/each}}
	}
}



