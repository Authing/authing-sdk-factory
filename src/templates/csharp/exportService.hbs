using Authing.SDK.V3.Extensions;
using Authing.SDK.V3.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Authing.SDK.V3.Services
{
	 public class ManagementClient : BaseManagementService
    {
	    /// <summary>
		/// 初始化管理服务
		/// </summary>
		/// <param name="accessKeyId ">用户池 ID</param>
		/// <param name="accessKeySecret ">用户池密钥</param>
		public  ManagementClient (string accessKeyId ,string accessKeySecret ) :base(accessKeyId, accessKeySecret )
		{
		}

		{{#each operations}}
		{{#if summary}}
		///<summary>
		/// {{{escapeComment summary}}}
		///</summary>
		{{/if}}
		{{#if parameters}}
		{{#each parameters}}
		/// <param name="{{#equals name 'namespace'}}nameSpace{{else}}{{{name}}}{{/equals}}">{{#if description}}{{{escapeComment description}}}{{/if}}</param>  
		{{/each}}
		{{/if}}
		{{#each results}}
		///<returns>{{{type}}}</returns>
		{{/each}}
		public async Task<{{>result}}> {{convertFirstCharToUpperCase name}}({{#equals method 'GET'}}{{reverse parameters}}{{else}}{{>parametersPost}}{{/equals}}) 
		{
			{{#if parametersQuery}}
			string httpResponse=await Request("{{{method}}}", "{{{path}}}", new Dictionary<string, object> {
				{{#each parametersQuery}}
					{{#equals name 'namespace'}}
							{"{{{prop}}}",nameSpace },
							{{else}}
								{"{{{prop}}}",{{{name}}} },
					{{/equals}}
				{{/each}}
				}).ConfigureAwait(false);
			{{/if}}
			{{#if parametersBody}}
			string httpResponse=await Request("{{{method}}}", "{{{path}}}",requestBody).ConfigureAwait(false);
			{{/if}}
			{{>result}} result=m_JsonService.DeserializeObject<{{>result}}>(httpResponse);
			return result;
		}
	{{/each}}	
	}
}



