<?php

/**
 * 命名空间
 */

namespace Authing;

/**
 * 导入
 */

require_once "util/Tool.php";

/**
 * ManagementClient
 */

class ManagementClient
{
    //域名
    public $_url;
    //AccessKey
    public $_accessKey;
    //AccessToken
    public $_accessToken;
    //AccessToken超时时间
    public $_accessTokenTime;
    //用户池ID
    public $_userPoolID;

    /**
     * 构造函数
     */
    public function __construct($accessKeyId, $accessKeySecret, $host = "https://api.authing.cn")
    {
        $this->_url = $host;
        $this->_accessKey = array("id" => $accessKeyId, "secret" => $accessKeySecret);
        $this->_userPoolID = $accessKeyId;
        $this->_getAccessToken($this->_accessKey["id"],  $this->_accessKey["secret"]);
    }

    /**
     * 构造请求
     */
    private function _requests($parMethod, $parGet = [], $parPost = [])
    {
        //过期
        if (!empty($this->_accessTokenTime) and time() >= $this->_accessTokenTime) {
            $this->_accessToken = null;
            $this->_accessTokenTime = null;
            $this->_getAccessToken($this->_accessKey["id"],  $this->_accessKey["secret"]);
        }
        //处理
        if ($parGet != []) $parGet = Util\Tool::formatData($parGet);
        if ($parPost != []) $parPost = Util\Tool::formatData($parPost);
        //头部
        $varHeader = array(
            "Authorization" => "Bearer " . $this->_accessToken,
            "Content-Type" => "application/json",
            "x-authing-userpool-id" => $this->_userPoolID,
            "x-authing-request-from" => "php-sdk",
            "x-authing-sdk-version" => "php:5.0.0",
        );
        //请求
        $varReq = Util\Tool::request($this->_url . $parMethod, $parGet, $parPost, $varHeader);
        return $varReq;
    }

    /**
     * 获取 Access Token
     */
    private function _getAccessToken($accessKeyId,  $accessKeySecret)
    {
        $tempAccessToken = $this->getManagementToken(array("accessKeyId" => $accessKeyId, "accessKeySecret" => $accessKeySecret))["data"];
        $this->_accessToken = $tempAccessToken["access_token"];
        $this->_accessTokenTime = time() + $tempAccessToken["expires_in"];
    }

	{{#each operations}}
	/**
	{{#if summary}}
	* {{{escapeComment summary}}}
	{{/if}}
	{{#if deprecated}}
	* @deprecated
	{{/if}}
	{{#if summary}}
	* @summary {{{escapeComment summary}}}
	{{/if}}
	{{#if description}}
	* @description {{{escapeComment description}}}
	{{/if}}
    {{#equals method 'GET'}}
    * @param array $option 可选，用于传递参数，如 array("email" => "main@test.com")
    {{#if parameters}}
	{{#each parameters}}
	* @param {{>type}} {{{name}}} {{#if isRequired}}必须{{else}}可选{{/if}}{{#if description}}，{{{escapeComment description}}}{{/if}}{{#if default}}，默认 {{{default}}}{{/if}}
	{{/each}}
	{{/if}}
    {{else}}
    * @param array $option 可选，用于传递参数，如 array("email" => "main@test.com")
    {{#if parametersRaw.php}}
    {{#each parametersRaw.php}}
	* @param {{>type}} {{{name}}} {{#if isRequired}}必须{{else}}可选{{/if}}{{#if description}}，{{{escapeComment description}}}{{/if}}{{#unless isRequired}}，默认 null{{/unless}}
    {{/each}}
    {{/if}}
    {{/equals}}
	{{#each results}}
	* @return {{{type}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	*/
	public function {{{name}}}($option = array())
    {
		{{#equals method 'GET'}}
		{{#if parametersQuery}}
        // 组装请求
		$varGet = array(
			{{#each parametersQuery}}
			"{{{prop}}}" => Util\Tool::getSet($option["{{{name}}}"]),
			{{/each}}
		);
		{{/if}}
        // 发送请求
		$varReq = $this->_requests("{{{path}}}", $varGet, null);
		{{else}}
		{{#if parametersRaw.php}}
        // 组装请求
		$varPost = array(
            {{#each parametersRaw.php}}
            "{{{name}}}" => Util\Tool::getSet($option["{{{name}}}"]),
            {{/each}}
		);
		{{/if}}
        // 发送请求
		$varReq = $this->_requests("{{{path}}}", null, $varPost);
		{{/equals}}
        // 返回
		return $varReq["body"];
	}

	{{/each}}
}