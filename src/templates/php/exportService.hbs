<?php

/**
 * 命名空间
 */

namespace Authing;

/**
 * 导入
 */

require_once "util/Tool.php";

/**
 * ManagementClient
 */

class ManagementClient
{
    //域名
    public $_url;
    //AccessKey
    public $_accessKey;
    //AccessToken
    public $_accessToken;
    //AccessToken超时时间
    public $_accessTokenTime;
    //用户池ID
    public $_userPoolID;


    /**
     * 构造函数
     * @param array $option 必须，用于传递参数，如 array("accessKeyId" => "AUTHING_USERPOOL_ID", "appSecret" => "AUTHING_USERPOOL_SECRET", "host" => "https://api.authing.cn")
     * @param string accessKeyId 必须，应用 ID
     * @param string accessKeySecret 必须，应用 Secret
     * @param string host 必须，应用域名，例如 example.authing.cn
     * @param integer timeout 可选，超时时间，单位为毫秒，默认为 10000（10 秒）
     * @throws \Exception
     */
    public function __construct($option)
    {
        if (
            !isset($option["accessKeyId"])
        ) {
            throw new \Exception('请在初始化 ManagementClient 时传入 accessKeyId');
        }

        if (
            !isset($option["accessKeySecret"])
        ) {
            throw new \Exception('请在初始化 ManagementClient 时传入 accessKeySecret');
        }

        if (
            !isset($option["host"])
        ) {
            $option["host"] = "https://api.authing.cn";
        }

        $this->_url = $option["host"];
        $this->_accessKey = array("id" => $option["accessKeyId"], "secret" => $option["accessKeySecret"]);
        $this->_userPoolID = $option["accessKeyId"];
        $this->_getAccessToken($this->_accessKey["id"], $this->_accessKey["secret"]);
    }

    /**
     * 构造请求
     */
    private function _requests($parMethod, $parGet = [], $parPost = [])
    {
        //过期
        if (!empty($this->_accessTokenTime) and time() >= $this->_accessTokenTime) {
            $this->_accessToken = null;
            $this->_accessTokenTime = null;
            $this->_getAccessToken($this->_accessKey["id"], $this->_accessKey["secret"]);
        }
        //处理
        if ($parGet != []) $parGet = Util\Tool::formatData($parGet);
        if ($parPost != []) $parPost = Util\Tool::formatData($parPost);
        //头部
        $varHeader = array(
            "Authorization" => "Bearer " . $this->_accessToken,
            "Content-Type" => "application/json",
            "x-authing-userpool-id" => $this->_userPoolID,
            "x-authing-request-from" => "php-sdk",
            "x-authing-sdk-version" => "php:5.0.0",
        );
        //请求
        $varRes = Util\Tool::request($this->_url . $parMethod, $parGet, $parPost, $varHeader);
        //错误
        if ($varRes["error"]) {
            throw new \Exception("请求错误：" . $varRes["error"], $varRes["code"]);
        } else if ($varRes["body"]["statusCode"] != 200) {
            throw new \Exception("错误：" . $varRes["body"]["message"], $varRes["body"]["statusCode"]);
        }
        //返回
        return $varRes;
    }

    public function getManagementToken($option = array())
    {
        // 组装请求
        $varPost = array(
            "accessKeySecret" => $option["accessKeySecret"],
            "accessKeyId" => $option["accessKeyId"],
        );
        // 发送请求
        $varRes = $this->_requests("/api/v3/get-management-token", null, $varPost);
        // 返回
        return $varRes["body"];
    }
    
    /**
     * 获取 Access Token
     */
    private function _getAccessToken($accessKeyId, $accessKeySecret)
    {
        $tempAccessToken = $this->getManagementToken(array("accessKeyId" => $accessKeyId, "accessKeySecret" => $accessKeySecret))["data"];
        $this->_accessToken = $tempAccessToken["access_token"];
        $this->_accessTokenTime = time() + $tempAccessToken["expires_in"];
    }


    {{#each operations}}
    /**
    {{#if summary}}
    * {{{escapeComment summary}}}
    {{/if}}
    {{#if deprecated}}
    * @deprecated
    {{/if}}
    {{#if summary}}
    * @summary {{{escapeComment summary}}}
    {{/if}}
    {{#if description}}
    * @description {{{escapeComment description}}}
    {{/if}}
    {{#equals method 'GET'}}
    * @param array $option 用于传递参数，如 array("email" => "main@test.com")
    {{#if parameters}}
    {{#each parameters}}
    * @param {{>type}} {{{name}}} {{#if isRequired}}必须{{else}}可选{{/if}}{{#if description}}，{{{escapeComment description}}}{{/if}}{{#if default}}，默认 {{{default}}}{{/if}}
    {{/each}}
    {{/if}}
    {{else}}
    * @param array $option 用于传递参数，如 array("email" => "main@test.com")
    {{#if parametersRaw.php}}
    {{#each parametersRaw.php}}
    * @param {{>type}} {{{name}}} {{#if isRequired}}必须{{else}}可选{{/if}}{{#if description}}，{{{escapeComment description}}}{{/if}}{{#unless isRequired}}，默认 null{{/unless}}
    {{/each}}
    {{/if}}
    {{/equals}}
    {{#each results}}
    * @return {{{type}}} {{#if description}}{{{escapeComment description}}}{{/if}}
    {{/each}}
    */
    public function {{{name}}}($option = array())
    {
        {{#equals method 'GET'}}
        {{#if parametersQuery}}
        // 组装请求
        $varGet = array(
            {{#each parametersQuery}}
            "{{{prop}}}" => Util\Tool::getOrDefault($option, "{{{name}}}", null),
            {{/each}}
        );
        // 发送请求
        $varRes = $this->_requests("{{{path}}}", $varGet, null);
        {{else}}
        // 发送请求
        $varRes = $this->_requests("{{{path}}}", null, null);
        {{/if}}
        {{else}}
        {{#if parametersRaw.php}}
        // 组装请求
        $varPost = array(
            {{#each parametersRaw.php}}
            "{{{name}}}" => Util\Tool::getOrDefault($option, "{{{name}}}", null),
            {{/each}}
        );
        // 发送请求
        $varRes = $this->_requests("{{{path}}}", null, $varPost);
        {{else}}
        // 发送请求
        $varRes = $this->_requests("{{{path}}}", null, null);
        {{/if}}
        {{/equals}}
        // 返回
        return $varRes["body"];
    }

    {{/each}}
}